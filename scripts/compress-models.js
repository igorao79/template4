#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const { exec } = require('child_process');
const { promisify } = require('util');

const execAsync = promisify(exec);

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–∂–∞—Ç–∏—è
const COMPRESSION_CONFIG = {
  // Draco compression settings
  draco: {
    compressionLevel: 7, // 0-10, –±–æ–ª—å—à–µ = –º–µ–Ω—å—à–µ —Ä–∞–∑–º–µ—Ä, –Ω–æ –¥–æ–ª—å—à–µ –æ–±—Ä–∞–±–æ—Ç–∫–∞
    quantizePosition: 14, // –±–∏—Ç—ã –¥–ª—è –ø–æ–∑–∏—Ü–∏–π (8-16)
    quantizeNormal: 10,   // –±–∏—Ç—ã –¥–ª—è –Ω–æ—Ä–º–∞–ª–µ–π (8-16)
    quantizeTexcoord: 12, // –±–∏—Ç—ã –¥–ª—è —Ç–µ–∫—Å—Ç—É—Ä–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç (8-16)
    quantizeColor: 8,     // –±–∏—Ç—ã –¥–ª—è —Ü–≤–µ—Ç–æ–≤ (8-16)
  },
  
  // Texture compression settings
  texture: {
    maxSize: 1024,        // –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ç–µ–∫—Å—Ç—É—Ä—ã
    quality: 0.8,         // –∫–∞—á–µ—Å—Ç–≤–æ JPEG (0-1)
    format: 'webp',       // —Ñ–æ—Ä–º–∞—Ç (webp, jpg, png)
  },
  
  // Geometry optimization
  geometry: {
    mergeDuplicateVertices: true,
    removeUnusedVertices: true,
    removeUnusedTextures: true,
    removeUnusedMaterials: true,
    simplifyMesh: true,
    simplificationRatio: 0.5, // 0-1, –º–µ–Ω—å—à–µ = –±–æ–ª—å—à–µ —É–ø—Ä–æ—â–µ–Ω–∏–µ
  }
};

class ModelCompressor {
  constructor() {
    this.modelsDir = path.join(process.cwd(), 'public', 'models');
    this.outputDir = path.join(this.modelsDir, 'compressed');
    this.backupDir = path.join(this.modelsDir, 'original');
  }

  async init() {
    // –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    await this.ensureDirectories();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
    await this.checkDependencies();
    
    console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø—Ä–µ—Å—Å–æ—Ä–∞ –º–æ–¥–µ–ª–µ–π...');
  }

  async ensureDirectories() {
    const dirs = [this.outputDir, this.backupDir];
    
    for (const dir of dirs) {
      if (!fs.existsSync(dir)) {
        fs.mkdirSync(dir, { recursive: true });
        console.log(`üìÅ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: ${dir}`);
      }
    }
  }

  async checkDependencies() {
    try {
      await execAsync('gltf-pipeline --version');
      console.log('‚úÖ gltf-pipeline –Ω–∞–π–¥–µ–Ω');
    } catch (error) {
      console.log('‚ùå gltf-pipeline –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∫–∞...');
      try {
        await execAsync('npm install -g gltf-pipeline');
        console.log('‚úÖ gltf-pipeline —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
      } catch (installError) {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å gltf-pipeline. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤—Ä—É—á–Ω—É—é: npm install -g gltf-pipeline');
      }
    }
  }

  async getModelFiles() {
    const files = fs.readdirSync(this.modelsDir);
    return files.filter(file => file.toLowerCase().endsWith('.glb'));
  }

  async getFileSize(filePath) {
    const stats = fs.statSync(filePath);
    return stats.size;
  }

  formatFileSize(bytes) {
    if (bytes === 0) return '0 Bytes';
    const k = 1024;
    const sizes = ['Bytes', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
  }

  async compressModel(filename) {
    const inputPath = path.join(this.modelsDir, filename);
    const outputPath = path.join(this.outputDir, filename);
    const backupPath = path.join(this.backupDir, filename);

    console.log(`\nüîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞: ${filename}`);

    // –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
    fs.copyFileSync(inputPath, backupPath);
    console.log(`üíæ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞`);

    const originalSize = await this.getFileSize(inputPath);
    console.log(`üìä –ò—Å—Ö–æ–¥–Ω—ã–π —Ä–∞–∑–º–µ—Ä: ${this.formatFileSize(originalSize)}`);

    try {
      // –ë–∞–∑–æ–≤–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Å Draco —Å–∂–∞—Ç–∏–µ–º
      const optimizationCommand = this.buildOptimizationCommand(inputPath, outputPath);
      
      console.log('üîß –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏...');
      await execAsync(optimizationCommand);

      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
      if (fs.existsSync(outputPath)) {
        const compressedSize = await this.getFileSize(outputPath);
        const compressionRatio = ((originalSize - compressedSize) / originalSize * 100).toFixed(1);
        
        console.log(`üìâ –°–∂–∞—Ç—ã–π —Ä–∞–∑–º–µ—Ä: ${this.formatFileSize(compressedSize)}`);
        console.log(`üéØ –°–∂–∞—Ç–∏–µ: ${compressionRatio}%`);

        // –ï—Å–ª–∏ —Å–∂–∞—Ç–∏–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, –ø—Ä–∏–º–µ–Ω—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
        if (compressionRatio < 30) {
          console.log('üîÑ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–∂–∞—Ç–∏—è...');
          await this.applyAdvancedCompression(outputPath);
        }

        return {
          filename,
          originalSize,
          compressedSize: await this.getFileSize(outputPath),
          compressionRatio: parseFloat(compressionRatio)
        };
      }
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ ${filename}:`, error.message);
      return null;
    }
  }

  buildOptimizationCommand(inputPath, outputPath) {
    const config = COMPRESSION_CONFIG;
    
    let command = `gltf-pipeline -i "${inputPath}" -o "${outputPath}"`;
    
    // Draco compression
    command += ` --draco.compressionLevel=${config.draco.compressionLevel}`;
    command += ` --draco.quantizePosition=${config.draco.quantizePosition}`;
    command += ` --draco.quantizeNormal=${config.draco.quantizeNormal}`;
    command += ` --draco.quantizeTexcoord=${config.draco.quantizeTexcoord}`;
    command += ` --draco.quantizeColor=${config.draco.quantizeColor}`;
    
    // Geometry optimization
    if (config.geometry.mergeDuplicateVertices) {
      command += ` --removeDuplicateVertices`;
    }
    if (config.geometry.removeUnusedVertices) {
      command += ` --removeUnusedVertices`;
    }
    if (config.geometry.removeUnusedTextures) {
      command += ` --removeUnusedTextures`;
    }
    if (config.geometry.removeUnusedMaterials) {
      command += ` --removeUnusedMaterials`;
    }
    
    return command;
  }

  async applyAdvancedCompression(filePath) {
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Å–∂–∞—Ç–∏–µ –¥–ª—è –æ—á–µ–Ω—å –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤
    const tempPath = filePath + '.temp';
    
    try {
      // –ë–æ–ª–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ Draco —Å–∂–∞—Ç–∏–µ
      const advancedCommand = `gltf-pipeline -i "${filePath}" -o "${tempPath}" --draco.compressionLevel=10 --draco.quantizePosition=8 --draco.quantizeNormal=8 --draco.quantizeTexcoord=8`;
      
      await execAsync(advancedCommand);
      
      if (fs.existsSync(tempPath)) {
        fs.renameSync(tempPath, filePath);
        console.log('‚úÖ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Å–∂–∞—Ç–∏–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–æ');
      }
    } catch (error) {
      console.warn('‚ö†Ô∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Å–∂–∞—Ç–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å:', error.message);
      if (fs.existsSync(tempPath)) {
        fs.unlinkSync(tempPath);
      }
    }
  }

  async compressAll() {
    const modelFiles = await this.getModelFiles();
    
    if (modelFiles.length === 0) {
      console.log('üì≠ –§–∞–π–ª—ã .glb –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ø–∞–ø–∫–µ public/models');
      return;
    }

    console.log(`üéØ –ù–∞–π–¥–µ–Ω–æ ${modelFiles.length} –º–æ–¥–µ–ª–µ–π –¥–ª—è —Å–∂–∞—Ç–∏—è`);
    
    const results = [];
    
    for (const filename of modelFiles) {
      const result = await this.compressModel(filename);
      if (result) {
        results.push(result);
      }
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    this.showSummary(results);
    
    // –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –∑–∞–º–µ–Ω–∏—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã
    await this.offerReplacement(results);
  }

  showSummary(results) {
    console.log('\nüìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:');
    console.log('=' .repeat(50));
    
    let totalOriginalSize = 0;
    let totalCompressedSize = 0;
    
    results.forEach(result => {
      totalOriginalSize += result.originalSize;
      totalCompressedSize += result.compressedSize;
      
      console.log(`${result.filename}:`);
      console.log(`  üì¶ ${this.formatFileSize(result.originalSize)} ‚Üí ${this.formatFileSize(result.compressedSize)} (${result.compressionRatio}%)`);
    });
    
    const totalCompressionRatio = ((totalOriginalSize - totalCompressedSize) / totalOriginalSize * 100).toFixed(1);
    
    console.log('=' .repeat(50));
    console.log(`üìà –û–ë–©–ï–ï –°–ñ–ê–¢–ò–ï: ${this.formatFileSize(totalOriginalSize)} ‚Üí ${this.formatFileSize(totalCompressedSize)}`);
    console.log(`üéØ –≠–ö–û–ù–û–ú–ò–Ø: ${this.formatFileSize(totalOriginalSize - totalCompressedSize)} (${totalCompressionRatio}%)`);
  }

  async offerReplacement(results) {
    console.log('\n‚ùì –ó–∞–º–µ–Ω–∏—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã —Å–∂–∞—Ç—ã–º–∏ –≤–µ—Ä—Å–∏—è–º–∏?');
    console.log('   (–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ø–∞–ø–∫–µ public/models/original)');
    
    // –í –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º —Ä–µ–∂–∏–º–µ –∑–∞–º–µ–Ω—è–µ–º
    console.log('üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–º–µ–Ω–∞...');
    
    results.forEach(result => {
      const originalPath = path.join(this.modelsDir, result.filename);
      const compressedPath = path.join(this.outputDir, result.filename);
      
      if (fs.existsSync(compressedPath)) {
        fs.copyFileSync(compressedPath, originalPath);
        console.log(`‚úÖ –ó–∞–º–µ–Ω–µ–Ω: ${result.filename}`);
      }
    });
    
    console.log('\nüéâ –°–∂–∞—Ç–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –í—Å–µ —Ñ–∞–π–ª—ã –∑–∞–º–µ–Ω–µ–Ω—ã –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –≤–µ—Ä—Å–∏—è–º–∏.');
    console.log('üíæ –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ public/models/original');
  }

  async restoreOriginals() {
    console.log('üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...');
    
    const backupFiles = fs.readdirSync(this.backupDir);
    
    backupFiles.forEach(filename => {
      const backupPath = path.join(this.backupDir, filename);
      const originalPath = path.join(this.modelsDir, filename);
      
      fs.copyFileSync(backupPath, originalPath);
      console.log(`‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${filename}`);
    });
    
    console.log('üéâ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
  }
}

// CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
async function main() {
  const compressor = new ModelCompressor();
  
  try {
    await compressor.init();
    
    const command = process.argv[2];
    
    switch (command) {
      case 'compress':
        await compressor.compressAll();
        break;
      case 'restore':
        await compressor.restoreOriginals();
        break;
      default:
        console.log('üîß –ö–æ–º–ø—Ä–µ—Å—Å–æ—Ä GLB –º–æ–¥–µ–ª–µ–π');
        console.log('');
        console.log('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:');
        console.log('  node scripts/compress-models.js compress  - –°–∂–∞—Ç—å –≤—Å–µ –º–æ–¥–µ–ª–∏');
        console.log('  node scripts/compress-models.js restore   - –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã');
        console.log('');
        console.log('–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ —Å–∂–∞—Ç–∏—è...');
        await compressor.compressAll();
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
    process.exit(1);
  }
}

if (require.main === module) {
  main();
} 